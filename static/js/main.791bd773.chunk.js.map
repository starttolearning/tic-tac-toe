{"version":3,"sources":["components/Square.js","components/Board.js","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","winnerColored","onClick","value","Board","contains","arr","obj","i","length","renderSquare","red","_this","winner","_this$props$winner","Object","slicedToArray","b","components_Square","squares","key","_this2","this","renderSqueres","map","innerArray","index","groupSquare","push","Component","Clock","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","setState","timerID","setInterval","tick","clearInterval","toLocaleTimeString","App","calculateWinner","lines","_lines$i","c","handleClick","positons","slice","history","stepNumber","xIsNext","concat","Array","fill","classes","toggleOrder","winnerLine","step","status","current","moves","move","desc","jumpTo","sort","Clock_Clock","Board_Board","handleToggle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.791bd773.chunk.js","sourcesContent":["import React from 'react'\n\nconst Square = (props) => (< button className={props.winnerColored} onClick={props.onClick}> {props.value}</button >)\n\nexport default Square;","import React, { Component } from 'react'\nimport Square from './Square'\n\n\nexport default class Board extends Component {\n\n    contains = (arr, obj) => {\n        var i = arr.length;\n        while (i--) {\n            if (arr[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    renderSquare = (i) => {\n\n        let red = ''\n        if (this.props.winner) {\n            const [a, b] = this.props.winner\n            red = this.contains(b, i) ? 'red' : ''\n            // console.log(a, b, i, red)\n        }\n\n        return <Square winnerColored={red ? red : ''}\n            value={this.props.squares[i]}\n            key={i}\n            onClick={() => this.props.onClick(i)}\n        />\n    }\n\n\n    render() {\n        const arrayWith = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8]\n        ];\n\n        const renderSqueres = arrayWith.map((innerArray, index) => {\n            let groupSquare = [];\n            innerArray.map((value, index) => {\n                groupSquare.push(this.renderSquare(value))\n            })\n            return <div key={index} className=\"col-one\">{groupSquare}</div>\n        })\n\n        return (\n            <div>\n                <div className=\"board\">\n                    {renderSqueres}\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nexport default class Clock extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            date: new Date()\n        }\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        })\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(), 1000\n        );\n\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <h1>Hello, World!</h1>\n                <h1>It is now {this.state.date.toLocaleTimeString()}</h1>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board'\nimport Clock from './components/Clock'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      positons: Array(9).fill(null),\n      xIsNext: true,\n      stepNumber: 0,\n      classes: Array(9).fill(null),\n      toggleOrder: true,\n      winnerLine: [-1, -1, -1]\n    }\n  }\n\n  calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ]\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i]\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return [squares[a], lines[i]]\n      }\n    }\n    return null;\n  }\n\n  handleClick = (i) => {\n    const positons = this.state.positons.slice();\n\n    const positonsCords = [\n      [1, 1],\n      [1, 2],\n      [1, 3],\n      [2, 1],\n      [2, 2],\n      [2, 3],\n      [3, 1],\n      [3, 2],\n      [3, 3],\n    ]\n\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\n\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    })\n\n    positons[this.state.stepNumber + 1] = positonsCords[i]\n\n    this.setState({\n      positons: positons\n    })\n  }\n\n  handleToggle() {\n    this.setState({\n      toggleOrder: !this.state.toggleOrder\n    })\n  }\n\n  jumpTo(step) {\n    const classes = Array(9).fill()\n    classes[step] = 'bold'\n\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n      classes: classes,\n    })\n  }\n\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = this.calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Positon: (' + this.state.positons[move] + '). Go to move # ' + move :\n        'Go to game start'\n      // console.log(step)\n      return (\n        <li key={move}>\n          <button className={this.state.classes[move] ? 'move-bold' : ''} onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      )\n    })\n\n    // Toggle Order use JSX.sort funciton\n    // Parameters: sort.key\n    if (!this.state.toggleOrder) {\n      moves.sort((a, b) => b.key - a.key)\n    }\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner[0];\n    } else if (!winner && this.state.stepNumber === 9) {\n      status = 'Being a Draw!'\n    }\n    else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"\">\n        <Clock />\n        <Clock />\n        <Clock />\n        <div>\n          <Board winner={winner} squares={current.squares} onClick={(i) => this.handleClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.handleToggle()}>\n            {this.state.toggleOrder ? 'Asc Order' : 'Dec Order'}\n          </button>\n          <ol >{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}